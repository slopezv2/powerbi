// Define and evaluate
DEFINE
     VAR MinimumAmount = 200000
     VAR MaximumAmount = 800000
EVALUATE
FILTER (
    ADDCOLUMNS (
        SUMMARIZE ( Sales, 'Product'[Category]),
        "CategoryAmount", [Sales Amount]
    ),
    AND (
        [CategoryAmount] >= MinimumAmount,
        [CategoryAmount] <= MaximumAmount
    )
)
ORDER BY [CategoryAmount]
// other example
DEFINE
    VAR MinimumAmount = 200000
    VAR MaximumAmount = 800000
    VAR CategoriesSales =
        ADDCOLUMNS (
            SUMMARIZE ( Sales, 'Product'[Category]),
            "CategoryAmount", [Sales Amount]
        )
EVALUATE
FILTER (
    CategoriesSales,
    AND (
        [CategoryAmount] >= MinimumAmount,
        [CategoryAmount] <= MaximumAmount
    )
)
ORDER BY [CategoryAmount]
// Defining a temporal measure
DEFINE
    MEASURE Sales[LargeSales] =
        CALCULATE (
            [Sales Amount],
            Sales[Net Price] >= 200
        )
EVALUATE
ADDCOLUMNS (
    VALUES ('Product'[Category]),
    "Large Sales", [LargeSales]
)
// Simulate slicer
EVALUATE
CALCULATETABLE (
    ROW (
        "Sales", [Sales Amount],
        "Cost", [Total Cost]
    ),
    'Product'[Color] = "Red"
)
// Using  SUMMARIZE to add columns aggregating values should be avoided
// There is a SUMMARIZE modifier named ROLLUP that changes the aggregation
// function of columns requiring for the subtotals to be added to the result.
// Look at the following query:
EVALUATE 
SUMMARIZE (
    Sales,
    ROLLUP (
        'Product'[Category],
        'Date'[Calendar Year]
    ),
    "Sales", [Sales Amount]
)
ORDER BY 
'Product'[Category]
'Date'[Calendar Year]
EVALUATE 
SUMMARIZE (
    Sales,
    ROLLUP (
        'Product'[Category],
        'Date'[Calendar Year]
    ),
    "Sales", [Sales Amount],
    "SubtotalCategory", ISSUBTOTAL ('Product'[Category])
    "SubtotalYear", ISSUBTOTAL ('Date'[Calendar Year])
)
ORDER BY 
'Product'[Category]
'Date'[Calendar Year]